#include<bits/stdc++.h>
using namespace std;

int n,m;
bool visited[10001];
vector<int>adj[10001];
int parent[10001];

void inp(){
    cin >> n >> m;
    for(int i=1;i<=n;i++){
        adj[i].clear();
    }
    memset(visited,false,sizeof(visited));
    memset(parent,0,sizeof(parent));
    for(int i=1;i<=m;i++){
        int x,y;
        cin >> x >> y;
        adj[x].push_back(y);
        adj[y].push_back(x);
    }
}

// bool dfs(int u){
//     visited[u] = true;
//     for(int v:adj[u]){
//         if(visited[v]==false){
//             parent[v] = u;
//             if(dfs(v)==true){
//                 return true;
//             }
//         }else if(v!=parent[u]){
//             return true;
//         }
//     }
//     return false;
// }

bool bfs(int u){
    visited[u] = true;
    queue<int>q;
    q.push(u);
    while(!q.empty()){
        int v=q.front(); q.pop();
        for(int x:adj[v]){
            if(visited[x]==false){
                q.push(x);
                visited[x] = true;
                parent[x] = v;
            }else if(x!=parent[v]){
                return true;
            }
        }
    }
    return false;
}

int main(){
    int T;
    cin >> T;
    while(T--){
        inp();
        int check=0;
        for(int i=1;i<=n;i++){
            if(visited[i]==false){
                if(bfs(i)==true){
                    check = 1;
                     break;
                }      
            }
        }
        if(check==0){
            cout <<"NO"<<endl;
        }else{
            cout <<"YES"<<endl;
        }
    }

}
